AWSTemplateFormatVersion: "2010-09-09"
Description: "Step Function state machine, and cloudwatch trigger to run every minute"
Parameters: 
  LambdaSyncName: 
    Type: String
    Description: Enter the name of syncroutes lambda function
    Default: awssyncroutes-dev
  VpcId: 
    Type: String
    Description: Enter the vpc id to sync routes
    Default: vpc-08379f9e44cb59fe8
  RouteTableId: 
    Type: String
    Description: Enter the MAIN route table id to sync routes
    Default: rtb-0959966ba6c082e2d
  CIDRBlockList: 
    Type: String
    Description: Enter the list of CIDR blocks to sync routes
    Default: 
      |
      ["{\"destination-cidr-block\":\"10.0.0.0/16\"}","{\"destination-cidr-block\":\"10.10.0.0/16\"}"]

Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
  StepFunctionStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: VMWareSyncRoutes-StateMachine
      DefinitionString:
        Fn::Sub: |
          {
            "Comment": "VMWare Routes-sync 10sec * 5 State Machine",
            "StartAt": "MainLoop",
            "States": {
              "MainLoop": {
                "Type": "Map",
                "ItemsPath": "$.waitList",
                "Parameters": {
                  "waitTime.$": "$$.Map.Item.Value",
                  "cidrBlockParameters.$": "$.cidrBlockParameters"
                },
                "MaxConcurrency": 1,
                "Iterator": {
                  "StartAt": "CallLambdas",
                  "States": {
                    "CallLambdas": {
                      "Type": "Map",
                      "InputPath": "$",
                      "ItemsPath": "$.cidrBlockParameters",
                      "Parameters": {
                        "resource": "/vpcs/{vpcId}/route-tables/{routeTableId}",
                        "path": "/vpcs/${VpcId}/route-tables/${RouteTableId}",
                        "httpMethod": "PATCH",
                        "headers": { "content-type": "application/json" },
                        "pathParameters": { "vpcId": "${VpcId}", "routeTableId": "${RouteTableId}" },
                        "body.$": "$$.Map.Item.Value"
                      },
                      "Iterator": {
                        "StartAt": "lambdaCall",
                        "States": {
                          "lambdaCall": {
                            "Type": "Task",
                            "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaSyncName}",                          "InputPath": "$",
                            "ResultPath": "$.results",
                            "OutputPath": "$",
                            "End": true
                          }
                        }
                      },
                      "Next": "WaitStep",
                      "ResultPath": "$.results"
                    },
                    "WaitStep": {
                      "Type": "Wait",
                      "SecondsPath": "$.waitTime",
                      "End": true
                    }
                  }
                },
                "Next": "DoneStep"
              },
              "DoneStep": {
                "Type": "Pass",
                "End": true
              }
            }
          }

      RoleArn: !GetAtt StatesExecutionRole.Arn
  ExecuteStateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Sid: "AllowCWEServiceToAssumeRole"
              Effect: "Allow"
              Action:
                - "sts:AssumeRole"
              Principal:
                Service:
                  - "events.amazonaws.com"
        Path: "/"
        Policies:
          -
            PolicyName: "ExecuteStateMachine"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "states:StartExecution"
                  Resource: "*"

  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "VMWareSyncRoutes-ScheduledRule"
      ScheduleExpression: "rate(1 minute)"
      State: "ENABLED"
      Targets:
        -
          Arn: !Ref StepFunctionStateMachine
          Id: SFN_Target
          RoleArn: !GetAtt ExecuteStateMachineRole.Arn
          Input:
            Fn::Sub: |
              {
                "results": [],
                "waitList": [
                  10,
                  10,
                  10,
                  10,
                  10
                ],
                "cidrBlockParameters": ${CIDRBlockList}
              }





